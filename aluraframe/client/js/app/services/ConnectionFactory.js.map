{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAUA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AAEbC,iB,GAAQ,I;;0CAECC,kB;AAET,8CAAa;AAAA;;AAET,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEqB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AACnCT,mDAAmBU,aAAnB,CAAiCC,EAAEC,MAAF,CAASC,MAA1C;AACC,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAG,CAAChB,UAAJ,EAAgB;AACZA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAW;AAC1B,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BATD;;AAWAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAA3B;AACH,6BAFD;AAIH,yBAvBM,CAAP;AAwBH;;;kDAEoBtB,U,EAAY;AAC7BH,+BAAO0B,OAAP,CAAe,iBAAS;AACxB,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7C1B,2CAAW2B,iBAAX,CAA6BD,KAA7B;AACC;AACD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBALD;AAMH;;;sDAEmB;;AAEhB,4BAAG7B,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AAEH;AACJ","file":"ConnectionFactory.js","sourcesContent":["    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'aluraframe';\r\n\r\n    let connection = null;  \r\n\r\n    let close = null;\r\n\r\n    export class ConnnectionFactory {\r\n\r\n        constructor(){\r\n\r\n            throw new Error('Não é possivel criar instancias de ConnectionFactory')\r\n        }\r\n\r\n        static getConnection(){\r\n            return new Promise((resolve, reject) => {\r\n\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                ConnnectionFactory._createStores(e.target.result);\r\n                };\r\n                \r\n                openRequest.onsuccess = e => {\r\n                    if(!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function() {\r\n                            throw new Error('Voce nao pode fechar diretamente a conexão');\r\n                        };\r\n                    }\r\n                    resolve(connection)\r\n                };\r\n                \r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error.name)\r\n                };\r\n                \r\n            })\r\n        }\r\n        \r\n        static _createStores(connection) {\r\n            stores.forEach(store => {\r\n            if (connection.objectStoreNames.contains(store)) {\r\n                connection.deleteObjectStore(store)\r\n                }\r\n                connection.createObjectStore(store, { autoIncrement: true });  \r\n            });  \r\n        }\r\n        \r\n    static closeConnection(){\r\n\r\n            if(connection){\r\n                close();\r\n                connection = null;\r\n        \r\n            }\r\n        }\r\n    }\r\n\r\n"]}