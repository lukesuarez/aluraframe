{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","_data","_quantidade","_valor","continue","name","clear"],"mappings":";;;;;;;;;;;;;;;AAAOA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEMC,a;AAET,uCAAYC,UAAZ,EAAuB;AAAA;;AACnB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAGQC,U,EAAW;AAAA;;AAChB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,UAHK,CAAd;;AAKAI,oCAAQI,SAAR,GAAoB,aAAK;;AAErBN;AACH,6BAHD;;AAKAE,oCAAQK,OAAR,GAAkB,aAAK;;AAEnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,0CAAP;AACH,6BAJD;AAMH,yBAlBM,CAAP;AAmBH;;;iDAEW;AAAA;;AACR,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAErC,gCAAIY,SAAU,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRiB,UAHQ,EAAd,CAFqC,CAKjB;;AAEnB,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOP,SAAP,GAAmB,aAAK;AACrB,oCAAIU,QAASN,EAAEC,MAAF,CAASM,MAAtB;;AAEA,oCAAGD,KAAH,EAAW;AACP,wCAAIE,OAAOF,MAAMG,KAAjB;;AAEAJ,gDAAYK,IAAZ,CAAiB,IAAI3B,UAAJ,CAAeyB,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CAAjB;;AAEAP,0CAAMQ,QAAN;AAEH,iCAPD,MAOO;AACHxB,4CAAQe,WAAR;AACH;AACH,6BAbD;;AAeAF,mCAAON,OAAP,GAAiB,aAAK;AAClBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAAT,CAAea,IAA3B;AACAxB,uCAAO,yCAAP;AACH,6BAHD;AAIH,yBA5BM,CAAP;AA6BH;;;iDAEW;AAAA;;AACR,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,UAAW,OAAKN,WAAL,CACdO,WADc,CACF,CAAC,OAAKN,MAAN,CADE,EACa,WADb,EAEdO,WAFc,CAEF,OAAKP,MAFH,EAGd6B,KAHc,EAAf;;AAKAxB,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,QAAQ,oCAAR,CAAL;AAAA,6BAApB;;AAEAE,oCAAQK,OAAR,GAAkB,aAAK;AACnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,0CAAP;AACH,6BAHD;AAIH,yBAZM,CAAP;AAaH","file":"NegociacaoDao.js","sourcesContent":["import{Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoDao {\r\n\r\n    constructor(connection){\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n\r\n    adiciona(negociacao){\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .add(negociacao);\r\n\r\n            request.onsuccess = e => {\r\n\r\n                resolve();\r\n            }\r\n            \r\n            request.onerror = e => {\r\n\r\n                console.log(e.target.error);\r\n                reject('Não foi possível adicionar a negociação!');\r\n            }\r\n\r\n        });\r\n    }\r\n    \r\n    listaTodos(){\r\n        return new Promise((resolve, reject) => {\r\n\r\n           let cursor =  this._connection\r\n                .transaction([this._store], 'readwrite') \r\n                .objectStore(this._store)\r\n                .openCursor(); //serve como um ponteiro para as negociações\r\n\r\n            let negociacoes = [];\r\n\r\n            cursor.onsuccess = e => {\r\n               let atual =  e.target.result;\r\n\r\n               if(atual)  {\r\n                   let dado = atual.value;\r\n\r\n                   negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n\r\n                   atual.continue();\r\n\r\n               } else {\r\n                   resolve(negociacoes);\r\n               }\r\n            };\r\n\r\n            cursor.onerror = e => {\r\n                console.log(e.target.error.name);\r\n                reject('Não foi possível listar as negociações!')\r\n            };\r\n        })\r\n    }\r\n\r\n    apagaTodos(){\r\n        return new Promise((resolve, reject) => {\r\n            let request =  this._connection\r\n            .transaction([this._store], 'readwrite') \r\n            .objectStore(this._store)\r\n            .clear();\r\n\r\n            request.onsuccess = e => resolve('Negociações removidas com sucesso!');\r\n\r\n            request.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Não foi possível remover as negociações!');\r\n            }\r\n        });\r\n    }\r\n}"]}